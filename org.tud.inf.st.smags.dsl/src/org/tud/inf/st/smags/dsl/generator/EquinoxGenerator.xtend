/*
 * generated by Xtext 2.10.0
 */
package org.tud.inf.st.smags.dsl.generator

import org.eclipse.core.resources.IProject
import org.eclipse.core.runtime.CoreException
import org.eclipse.core.runtime.NullProgressMonitor
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.pde.core.plugin.PluginRegistry
import org.eclipse.pde.core.project.IBundleProjectService
import org.eclipse.pde.internal.core.ClasspathComputer
import org.eclipse.xtext.builder.EclipseResourceFileSystemAccess2
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.osgi.framework.Version
import org.tud.inf.st.smags.model.smags.Architecture
import org.tud.inf.st.smags.model.smags.Component
import org.tud.inf.st.smags.model.smags.MetaArchitecture
import org.tud.inf.st.smags.model.smags.SmagsModel
import org.tud.inf.st.smags.dsl.Activator;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class EquinoxGenerator extends JavaProjectGenerator {

	override doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		if (fsa instanceof EclipseResourceFileSystemAccess2) {

			val eclipseFsa = fsa as EclipseResourceFileSystemAccess2;

			for (m : resource.contents.filter(SmagsModel)) {
				for (a : m.elements.filter(MetaArchitecture)) {
					val project = a.pkg.createProject;
					eclipseFsa.project = project;
					addSoureFolder(project.extendToJava, "src-gen");
					addNature(project, "org.eclipse.pde.PluginNature");

					eclipseFsa.outputPath = ".";
					fsa.generateFile("build.properties", buildProperties);
					project.extendToPlugin("org.eclipse.osgi")

					eclipseFsa.outputPath = "src-gen";
					generateMetaArchitectureFiles(a, fsa)
				}

				for (a : m.elements.filter(Architecture)) {
					for (c : a.elements.filter(Component)) {
						val project = c.pkg.createProject;
						eclipseFsa.project = project;
						addSoureFolder(project.extendToJava, "src-gen");

						eclipseFsa.outputPath = ".";
						fsa.generateFile("build.properties", buildProperties);
						project.extendToPlugin(a.type.pkg,"org.eclipse.osgi");						

						eclipseFsa.outputPath = "src-gen";
						fsa.generateFile(c.pkg.replaceAll("\\.","/")+'/'+c.name.toFirstUpper+".java", c.activator);
						
						//TODO generate services for roles
						
						//TODO generate run config
					}
				}
			}
		}
	}
	
	def extendToPlugin(IProject project, String... deps) throws CoreException {
		addNature(project, "org.eclipse.pde.PluginNature");		
		
		val monitor = new NullProgressMonitor();

		val context = Activator.getDefault().getContext();

		val bundleProjectServiceRef = context
				.getServiceReference(typeof(IBundleProjectService));
		val bps = context.getService(bundleProjectServiceRef);

		val bpd = bps.getDescription(project);
		
		val requiredStrs = newArrayList(deps);
		requiredStrs.add(Activator.PLUGIN_ID);

		val required = requiredStrs.map[s |
				bps.newRequiredBundle(s, null, false, false)];

		bpd.setRequiredBundles(required);
		
		bpd.setSymbolicName(project.getName());
		bpd.setBundleVersion(new Version("0.1"));

		bpd.apply(monitor);
		
		val model = PluginRegistry.findModel(project);
		ClasspathComputer.setClasspath(project, model);
	}
	
	protected def pkg(Component c) {
		return (c.eContainer as Architecture).pkg+'.'+c.name.toLowerCase
	}
	
	protected def manifest(String name, String symbolic, String... requires) '''
		«manifest(name,symbolic)»
		Require-Bundle: org.eclipse.osgi«FOR r:requires»,«"\n"» «r»«ENDFOR»
	'''

	protected def buildProperties() '''
		source.. = src-gen/
		output.. = bin/
		bin.includes = META-INF/,\
		               .
	'''
	
	protected def activator(Component c) '''
		package «c.pkg»;
		
		import org.osgi.framework.BundleActivator;
		import org.osgi.framework.BundleContext;
		
		public class «c.name.toFirstUpper» implements BundleActivator{
			public void start(BundleContext context) throws Exception {
				
			}
			
			public void stop(BundleContext context) throws Exception {
				
			}			
		}		
	'''
}
