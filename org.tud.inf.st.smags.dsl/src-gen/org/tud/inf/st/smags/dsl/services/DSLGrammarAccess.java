/*
 * generated by Xtext 2.10.0
 */
package org.tud.inf.st.smags.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DSLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class SmagsModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tud.inf.st.smags.dsl.DSL.SmagsModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSmagsModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cImportsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cImportsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cImportsImportParserRuleCall_1_2_0 = (RuleCall)cImportsAssignment_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsSmagsElementParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		
		//SmagsModel smags::SmagsModel:
		//	{smags::SmagsModel} ('imports' '{'
		//	imports+=Import*
		//	'}')?
		//	elements+=SmagsElement*
		@Override public ParserRule getRule() { return rule; }
		
		//{smags::SmagsModel} ('imports' '{' imports+=Import* '}')? elements+=SmagsElement*
		public Group getGroup() { return cGroup; }
		
		//{smags::SmagsModel}
		public Action getSmagsModelAction_0() { return cSmagsModelAction_0; }
		
		//('imports' '{' imports+=Import* '}')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'imports'
		public Keyword getImportsKeyword_1_0() { return cImportsKeyword_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_1() { return cLeftCurlyBracketKeyword_1_1; }
		
		//imports+=Import*
		public Assignment getImportsAssignment_1_2() { return cImportsAssignment_1_2; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_1_2_0() { return cImportsImportParserRuleCall_1_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }
		
		//elements+=SmagsElement*
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//SmagsElement
		public RuleCall getElementsSmagsElementParserRuleCall_2_0() { return cElementsSmagsElementParserRuleCall_2_0; }
	}
	public class SmagsElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tud.inf.st.smags.dsl.DSL.SmagsElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMetaArchitectureParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArchitectureParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SmagsElement smags::SmagsElement:
		//	MetaArchitecture | Architecture
		@Override public ParserRule getRule() { return rule; }
		
		//MetaArchitecture | Architecture
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MetaArchitecture
		public RuleCall getMetaArchitectureParserRuleCall_0() { return cMetaArchitectureParserRuleCall_0; }
		
		//Architecture
		public RuleCall getArchitectureParserRuleCall_1() { return cArchitectureParserRuleCall_1; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tud.inf.st.smags.dsl.DSL.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportURIAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportURISTRINGTerminalRuleCall_0_0 = (RuleCall)cImportURIAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Import smags::Import:
		//	importURI=STRING ';'
		@Override public ParserRule getRule() { return rule; }
		
		//importURI=STRING ';'
		public Group getGroup() { return cGroup; }
		
		//importURI=STRING
		public Assignment getImportURIAssignment_0() { return cImportURIAssignment_0; }
		
		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_0_0() { return cImportURISTRINGTerminalRuleCall_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class MetaArchitectureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tud.inf.st.smags.dsl.DSL.MetaArchitecture");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMetaArchitectureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypesTypeParserRuleCall_3_0 = (RuleCall)cTypesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cElementsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cElementsMetaArchitectureElementParserRuleCall_6_0 = (RuleCall)cElementsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cStartKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cWithKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cInitialRoleModelAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final CrossReference cInitialRoleModelRoleModelCrossReference_8_2_0 = (CrossReference)cInitialRoleModelAssignment_8_2.eContents().get(0);
		private final RuleCall cInitialRoleModelRoleModelEStringParserRuleCall_8_2_0_1 = (RuleCall)cInitialRoleModelRoleModelCrossReference_8_2_0.eContents().get(1);
		
		//MetaArchitecture smags::MetaArchitecture:
		//	'MetaArchitecture' name=EString
		//	'{'
		//	types+=Type*
		//	'}'
		//	'{'
		//	elements+=MetaArchitectureElement*
		//	'}' ('start' 'with' initialRoleModel=[smags::RoleModel|EString])?
		@Override public ParserRule getRule() { return rule; }
		
		//'MetaArchitecture' name=EString '{' types+=Type* '}' '{' elements+=MetaArchitectureElement* '}' ('start' 'with'
		//initialRoleModel=[smags::RoleModel|EString])?
		public Group getGroup() { return cGroup; }
		
		//'MetaArchitecture'
		public Keyword getMetaArchitectureKeyword_0() { return cMetaArchitectureKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//types+=Type*
		public Assignment getTypesAssignment_3() { return cTypesAssignment_3; }
		
		//Type
		public RuleCall getTypesTypeParserRuleCall_3_0() { return cTypesTypeParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//elements+=MetaArchitectureElement*
		public Assignment getElementsAssignment_6() { return cElementsAssignment_6; }
		
		//MetaArchitectureElement
		public RuleCall getElementsMetaArchitectureElementParserRuleCall_6_0() { return cElementsMetaArchitectureElementParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
		
		//('start' 'with' initialRoleModel=[smags::RoleModel|EString])?
		public Group getGroup_8() { return cGroup_8; }
		
		//'start'
		public Keyword getStartKeyword_8_0() { return cStartKeyword_8_0; }
		
		//'with'
		public Keyword getWithKeyword_8_1() { return cWithKeyword_8_1; }
		
		//initialRoleModel=[smags::RoleModel|EString]
		public Assignment getInitialRoleModelAssignment_8_2() { return cInitialRoleModelAssignment_8_2; }
		
		//[smags::RoleModel|EString]
		public CrossReference getInitialRoleModelRoleModelCrossReference_8_2_0() { return cInitialRoleModelRoleModelCrossReference_8_2_0; }
		
		//EString
		public RuleCall getInitialRoleModelRoleModelEStringParserRuleCall_8_2_0_1() { return cInitialRoleModelRoleModelEStringParserRuleCall_8_2_0_1; }
	}
	public class MetaArchitectureElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tud.inf.st.smags.dsl.DSL.MetaArchitectureElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cComponentTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPortTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRoleModelParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//MetaArchitectureElement smags::MetaArchitectureElement:
		//	ComponentType | PortType | RoleModel
		@Override public ParserRule getRule() { return rule; }
		
		//ComponentType | PortType | RoleModel
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ComponentType
		public RuleCall getComponentTypeParserRuleCall_0() { return cComponentTypeParserRuleCall_0; }
		
		//PortType
		public RuleCall getPortTypeParserRuleCall_1() { return cPortTypeParserRuleCall_1; }
		
		//RoleModel
		public RuleCall getRoleModelParserRuleCall_2() { return cRoleModelParserRuleCall_2; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tud.inf.st.smags.dsl.DSL.Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Type smags::Type:
		//	'Type' ':' name=EString ';'
		@Override public ParserRule getRule() { return rule; }
		
		//'Type' ':' name=EString ';'
		public Group getGroup() { return cGroup; }
		
		//'Type'
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tud.inf.st.smags.dsl.DSL.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeUseParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Variable smags::Variable:
		//	type=TypeUse name=EString
		@Override public ParserRule getRule() { return rule; }
		
		//type=TypeUse name=EString
		public Group getGroup() { return cGroup; }
		
		//type=TypeUse
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//TypeUse
		public RuleCall getTypeTypeUseParserRuleCall_0_0() { return cTypeTypeUseParserRuleCall_0_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}
	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tud.inf.st.smags.dsl.DSL.Method");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReturnTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cReturnTypeTypeUseParserRuleCall_0_0 = (RuleCall)cReturnTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cArgsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cArgsVariableParserRuleCall_3_0_0 = (RuleCall)cArgsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cArgsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cArgsVariableParserRuleCall_3_1_1_0 = (RuleCall)cArgsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Method smags::Method:
		//	returnType=TypeUse name=EString '(' (args+=Variable ("," args+=Variable)*)? ')'
		@Override public ParserRule getRule() { return rule; }
		
		//returnType=TypeUse name=EString '(' (args+=Variable ("," args+=Variable)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//returnType=TypeUse
		public Assignment getReturnTypeAssignment_0() { return cReturnTypeAssignment_0; }
		
		//TypeUse
		public RuleCall getReturnTypeTypeUseParserRuleCall_0_0() { return cReturnTypeTypeUseParserRuleCall_0_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(args+=Variable ("," args+=Variable)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//args+=Variable
		public Assignment getArgsAssignment_3_0() { return cArgsAssignment_3_0; }
		
		//Variable
		public RuleCall getArgsVariableParserRuleCall_3_0_0() { return cArgsVariableParserRuleCall_3_0_0; }
		
		//("," args+=Variable)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//args+=Variable
		public Assignment getArgsAssignment_3_1_1() { return cArgsAssignment_3_1_1; }
		
		//Variable
		public RuleCall getArgsVariableParserRuleCall_3_1_1_0() { return cArgsVariableParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class TypeUseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tud.inf.st.smags.dsl.DSL.TypeUse");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveUseParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGenericUseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypeUse smags::TypeUse:
		//	PrimitiveUse | GenericUse
		@Override public ParserRule getRule() { return rule; }
		
		//PrimitiveUse | GenericUse
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrimitiveUse
		public RuleCall getPrimitiveUseParserRuleCall_0() { return cPrimitiveUseParserRuleCall_0; }
		
		//GenericUse
		public RuleCall getGenericUseParserRuleCall_1() { return cGenericUseParserRuleCall_1; }
	}
	public class PrimitiveUseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tud.inf.st.smags.dsl.DSL.PrimitiveUse");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypeEStringParserRuleCall_0 = (RuleCall)cTypeAssignment.eContents().get(0);
		
		//PrimitiveUse smags::PrimitiveUse:
		//	type=EString
		@Override public ParserRule getRule() { return rule; }
		
		//type=EString
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//EString
		public RuleCall getTypeEStringParserRuleCall_0() { return cTypeEStringParserRuleCall_0; }
	}
	public class GenericUseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tud.inf.st.smags.dsl.DSL.GenericUse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeTypeCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeTypeEStringParserRuleCall_1_0_1 = (RuleCall)cTypeTypeCrossReference_1_0.eContents().get(1);
		
		//GenericUse smags::GenericUse:
		//	':' type=[smags::Type|EString]
		@Override public ParserRule getRule() { return rule; }
		
		//':' type=[smags::Type|EString]
		public Group getGroup() { return cGroup; }
		
		//':'
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }
		
		//type=[smags::Type|EString]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//[smags::Type|EString]
		public CrossReference getTypeTypeCrossReference_1_0() { return cTypeTypeCrossReference_1_0; }
		
		//EString
		public RuleCall getTypeTypeEStringParserRuleCall_1_0_1() { return cTypeTypeEStringParserRuleCall_1_0_1; }
	}
	public class PortTypeElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tud.inf.st.smags.dsl.DSL.PortTypeElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cVariableParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cMethodParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//PortTypeElement smags::PortTypeElement:
		//	(Variable | Method) ';'
		@Override public ParserRule getRule() { return rule; }
		
		//(Variable | Method) ';'
		public Group getGroup() { return cGroup; }
		
		//(Variable | Method)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//Variable
		public RuleCall getVariableParserRuleCall_0_0() { return cVariableParserRuleCall_0_0; }
		
		//Method
		public RuleCall getMethodParserRuleCall_0_1() { return cMethodParserRuleCall_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class CompositionOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tud.inf.st.smags.dsl.DSL.CompositionOperator");
		private final RuleCall cBindOperatorParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//CompositionOperator smags::CompositionOperator:
		//	BindOperator
		@Override public ParserRule getRule() { return rule; }
		
		//BindOperator
		public RuleCall getBindOperatorParserRuleCall() { return cBindOperatorParserRuleCall; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tud.inf.st.smags.dsl.DSL.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class ComponentTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tud.inf.st.smags.dsl.DSL.ComponentType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cComponentTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cComponentTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cProvidesKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cProvidesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cProvidesPortTypeCrossReference_3_1_0 = (CrossReference)cProvidesAssignment_3_1.eContents().get(0);
		private final RuleCall cProvidesPortTypeEStringParserRuleCall_3_1_0_1 = (RuleCall)cProvidesPortTypeCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cProvidesAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final CrossReference cProvidesPortTypeCrossReference_3_2_1_0 = (CrossReference)cProvidesAssignment_3_2_1.eContents().get(0);
		private final RuleCall cProvidesPortTypeEStringParserRuleCall_3_2_1_0_1 = (RuleCall)cProvidesPortTypeCrossReference_3_2_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ComponentType smags::ComponentType:
		//	{smags::ComponentType}
		//	'ComponentType'
		//	name=EString ('provides' provides+=[smags::PortType|EString] (',' provides+=[smags::PortType|EString])*)?
		//	';'
		@Override public ParserRule getRule() { return rule; }
		
		//{smags::ComponentType} 'ComponentType' name=EString ('provides' provides+=[smags::PortType|EString] (','
		//provides+=[smags::PortType|EString])*)? ';'
		public Group getGroup() { return cGroup; }
		
		//{smags::ComponentType}
		public Action getComponentTypeAction_0() { return cComponentTypeAction_0; }
		
		//'ComponentType'
		public Keyword getComponentTypeKeyword_1() { return cComponentTypeKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//('provides' provides+=[smags::PortType|EString] (',' provides+=[smags::PortType|EString])*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'provides'
		public Keyword getProvidesKeyword_3_0() { return cProvidesKeyword_3_0; }
		
		//provides+=[smags::PortType|EString]
		public Assignment getProvidesAssignment_3_1() { return cProvidesAssignment_3_1; }
		
		//[smags::PortType|EString]
		public CrossReference getProvidesPortTypeCrossReference_3_1_0() { return cProvidesPortTypeCrossReference_3_1_0; }
		
		//EString
		public RuleCall getProvidesPortTypeEStringParserRuleCall_3_1_0_1() { return cProvidesPortTypeEStringParserRuleCall_3_1_0_1; }
		
		//(',' provides+=[smags::PortType|EString])*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//provides+=[smags::PortType|EString]
		public Assignment getProvidesAssignment_3_2_1() { return cProvidesAssignment_3_2_1; }
		
		//[smags::PortType|EString]
		public CrossReference getProvidesPortTypeCrossReference_3_2_1_0() { return cProvidesPortTypeCrossReference_3_2_1_0; }
		
		//EString
		public RuleCall getProvidesPortTypeEStringParserRuleCall_3_2_1_0_1() { return cProvidesPortTypeEStringParserRuleCall_3_2_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class PortTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tud.inf.st.smags.dsl.DSL.PortType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPortTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPortTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementsPortTypeElementParserRuleCall_4_0 = (RuleCall)cElementsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//PortType smags::PortType:
		//	{smags::PortType}
		//	'PortType'
		//	name=EString '{' elements+=PortTypeElement* '}'
		@Override public ParserRule getRule() { return rule; }
		
		//{smags::PortType} 'PortType' name=EString '{' elements+=PortTypeElement* '}'
		public Group getGroup() { return cGroup; }
		
		//{smags::PortType}
		public Action getPortTypeAction_0() { return cPortTypeAction_0; }
		
		//'PortType'
		public Keyword getPortTypeKeyword_1() { return cPortTypeKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//elements+=PortTypeElement*
		public Assignment getElementsAssignment_4() { return cElementsAssignment_4; }
		
		//PortTypeElement
		public RuleCall getElementsPortTypeElementParserRuleCall_4_0() { return cElementsPortTypeElementParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class RoleModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tud.inf.st.smags.dsl.DSL.RoleModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRoleModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRoleModelKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSlotsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSlotsRoleModelSlotParserRuleCall_3_1_0 = (RuleCall)cSlotsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cSlotsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cSlotsRoleModelSlotParserRuleCall_3_2_1_0 = (RuleCall)cSlotsAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cInitializationAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cInitializationCompositionOperatorParserRuleCall_5_0 = (RuleCall)cInitializationAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//RoleModel smags::RoleModel:
		//	{smags::RoleModel}
		//	'RoleModel'
		//	name=EString ('(' slots+=RoleModelSlot ("," slots+=RoleModelSlot)* ')')?
		//	'{'
		//	initialization+=CompositionOperator*
		//	'}'
		@Override public ParserRule getRule() { return rule; }
		
		//{smags::RoleModel} 'RoleModel' name=EString ('(' slots+=RoleModelSlot ("," slots+=RoleModelSlot)* ')')? '{'
		//initialization+=CompositionOperator* '}'
		public Group getGroup() { return cGroup; }
		
		//{smags::RoleModel}
		public Action getRoleModelAction_0() { return cRoleModelAction_0; }
		
		//'RoleModel'
		public Keyword getRoleModelKeyword_1() { return cRoleModelKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//('(' slots+=RoleModelSlot ("," slots+=RoleModelSlot)* ')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//slots+=RoleModelSlot
		public Assignment getSlotsAssignment_3_1() { return cSlotsAssignment_3_1; }
		
		//RoleModelSlot
		public RuleCall getSlotsRoleModelSlotParserRuleCall_3_1_0() { return cSlotsRoleModelSlotParserRuleCall_3_1_0; }
		
		//("," slots+=RoleModelSlot)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//slots+=RoleModelSlot
		public Assignment getSlotsAssignment_3_2_1() { return cSlotsAssignment_3_2_1; }
		
		//RoleModelSlot
		public RuleCall getSlotsRoleModelSlotParserRuleCall_3_2_1_0() { return cSlotsRoleModelSlotParserRuleCall_3_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//initialization+=CompositionOperator*
		public Assignment getInitializationAssignment_5() { return cInitializationAssignment_5; }
		
		//CompositionOperator
		public RuleCall getInitializationCompositionOperatorParserRuleCall_5_0() { return cInitializationCompositionOperatorParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class RoleModelSlotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tud.inf.st.smags.dsl.DSL.RoleModelSlot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRoleModelSlotAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeComponentTypeCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeComponentTypeEStringParserRuleCall_1_0_1 = (RuleCall)cTypeComponentTypeCrossReference_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//RoleModelSlot smags::RoleModelSlot:
		//	{smags::RoleModelSlot} type=[smags::ComponentType|EString] name=EString
		@Override public ParserRule getRule() { return rule; }
		
		//{smags::RoleModelSlot} type=[smags::ComponentType|EString] name=EString
		public Group getGroup() { return cGroup; }
		
		//{smags::RoleModelSlot}
		public Action getRoleModelSlotAction_0() { return cRoleModelSlotAction_0; }
		
		//type=[smags::ComponentType|EString]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//[smags::ComponentType|EString]
		public CrossReference getTypeComponentTypeCrossReference_1_0() { return cTypeComponentTypeCrossReference_1_0; }
		
		//EString
		public RuleCall getTypeComponentTypeEStringParserRuleCall_1_0_1() { return cTypeComponentTypeEStringParserRuleCall_1_0_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class BindOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tud.inf.st.smags.dsl.DSL.BindOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBindOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBindKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRoleKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cToAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cToPortTypeCrossReference_3_0 = (CrossReference)cToAssignment_3.eContents().get(0);
		private final RuleCall cToPortTypeEStringParserRuleCall_3_0_1 = (RuleCall)cToPortTypeCrossReference_3_0.eContents().get(1);
		private final Keyword cToKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSlotAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cSlotRoleModelSlotCrossReference_5_0 = (CrossReference)cSlotAssignment_5.eContents().get(0);
		private final RuleCall cSlotRoleModelSlotEStringParserRuleCall_5_0_1 = (RuleCall)cSlotRoleModelSlotCrossReference_5_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//BindOperator smags::BindOperator:
		//	{smags::BindOperator}
		//	'bind' 'role' to=[smags::PortType|EString]
		//	'to' slot=[smags::RoleModelSlot|EString] ';'
		@Override public ParserRule getRule() { return rule; }
		
		//{smags::BindOperator} 'bind' 'role' to=[smags::PortType|EString] 'to' slot=[smags::RoleModelSlot|EString] ';'
		public Group getGroup() { return cGroup; }
		
		//{smags::BindOperator}
		public Action getBindOperatorAction_0() { return cBindOperatorAction_0; }
		
		//'bind'
		public Keyword getBindKeyword_1() { return cBindKeyword_1; }
		
		//'role'
		public Keyword getRoleKeyword_2() { return cRoleKeyword_2; }
		
		//to=[smags::PortType|EString]
		public Assignment getToAssignment_3() { return cToAssignment_3; }
		
		//[smags::PortType|EString]
		public CrossReference getToPortTypeCrossReference_3_0() { return cToPortTypeCrossReference_3_0; }
		
		//EString
		public RuleCall getToPortTypeEStringParserRuleCall_3_0_1() { return cToPortTypeEStringParserRuleCall_3_0_1; }
		
		//'to'
		public Keyword getToKeyword_4() { return cToKeyword_4; }
		
		//slot=[smags::RoleModelSlot|EString]
		public Assignment getSlotAssignment_5() { return cSlotAssignment_5; }
		
		//[smags::RoleModelSlot|EString]
		public CrossReference getSlotRoleModelSlotCrossReference_5_0() { return cSlotRoleModelSlotCrossReference_5_0; }
		
		//EString
		public RuleCall getSlotRoleModelSlotEStringParserRuleCall_5_0_1() { return cSlotRoleModelSlotEStringParserRuleCall_5_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class ArchitectureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tud.inf.st.smags.dsl.DSL.Architecture");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArchitectureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeMetaArchitectureCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeMetaArchitectureEStringParserRuleCall_3_0_1 = (RuleCall)cTypeMetaArchitectureCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTypeBindingsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTypeBindingsTypeBindingParserRuleCall_5_0 = (RuleCall)cTypeBindingsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cElementsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cElementsArchitectureElementParserRuleCall_8_0 = (RuleCall)cElementsAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Architecture smags::Architecture:
		//	'Architecture' name=EString '::' type=[smags::MetaArchitecture|EString]
		//	'{'
		//	typeBindings+=TypeBinding*
		//	'}'
		//	'{'
		//	elements+=ArchitectureElement*
		//	'}'
		@Override public ParserRule getRule() { return rule; }
		
		//'Architecture' name=EString '::' type=[smags::MetaArchitecture|EString] '{' typeBindings+=TypeBinding* '}' '{'
		//elements+=ArchitectureElement* '}'
		public Group getGroup() { return cGroup; }
		
		//'Architecture'
		public Keyword getArchitectureKeyword_0() { return cArchitectureKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'::'
		public Keyword getColonColonKeyword_2() { return cColonColonKeyword_2; }
		
		//type=[smags::MetaArchitecture|EString]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//[smags::MetaArchitecture|EString]
		public CrossReference getTypeMetaArchitectureCrossReference_3_0() { return cTypeMetaArchitectureCrossReference_3_0; }
		
		//EString
		public RuleCall getTypeMetaArchitectureEStringParserRuleCall_3_0_1() { return cTypeMetaArchitectureEStringParserRuleCall_3_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//typeBindings+=TypeBinding*
		public Assignment getTypeBindingsAssignment_5() { return cTypeBindingsAssignment_5; }
		
		//TypeBinding
		public RuleCall getTypeBindingsTypeBindingParserRuleCall_5_0() { return cTypeBindingsTypeBindingParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }
		
		//elements+=ArchitectureElement*
		public Assignment getElementsAssignment_8() { return cElementsAssignment_8; }
		
		//ArchitectureElement
		public RuleCall getElementsArchitectureElementParserRuleCall_8_0() { return cElementsArchitectureElementParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class ArchitectureElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tud.inf.st.smags.dsl.DSL.ArchitectureElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cComponentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPortParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ArchitectureElement smags::ArchitectureElement:
		//	Component | Port
		@Override public ParserRule getRule() { return rule; }
		
		//Component | Port
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Component
		public RuleCall getComponentParserRuleCall_0() { return cComponentParserRuleCall_0; }
		
		//Port
		public RuleCall getPortParserRuleCall_1() { return cPortParserRuleCall_1; }
	}
	public class ComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tud.inf.st.smags.dsl.DSL.Component");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComponentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeComponentTypeCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeComponentTypeEStringParserRuleCall_3_0_1 = (RuleCall)cTypeComponentTypeCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Component smags::Component:
		//	'Component' name=EString '::' type=[smags::ComponentType|EString] ';'
		@Override public ParserRule getRule() { return rule; }
		
		//'Component' name=EString '::' type=[smags::ComponentType|EString] ';'
		public Group getGroup() { return cGroup; }
		
		//'Component'
		public Keyword getComponentKeyword_0() { return cComponentKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'::'
		public Keyword getColonColonKeyword_2() { return cColonColonKeyword_2; }
		
		//type=[smags::ComponentType|EString]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//[smags::ComponentType|EString]
		public CrossReference getTypeComponentTypeCrossReference_3_0() { return cTypeComponentTypeCrossReference_3_0; }
		
		//EString
		public RuleCall getTypeComponentTypeEStringParserRuleCall_3_0_1() { return cTypeComponentTypeEStringParserRuleCall_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class PortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tud.inf.st.smags.dsl.DSL.Port");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPortKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypePortTypeCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypePortTypeEStringParserRuleCall_3_0_1 = (RuleCall)cTypePortTypeCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Port smags::Port:
		//	'Port' name=EString '::' type=[smags::PortType|EString] ';'
		@Override public ParserRule getRule() { return rule; }
		
		//'Port' name=EString '::' type=[smags::PortType|EString] ';'
		public Group getGroup() { return cGroup; }
		
		//'Port'
		public Keyword getPortKeyword_0() { return cPortKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'::'
		public Keyword getColonColonKeyword_2() { return cColonColonKeyword_2; }
		
		//type=[smags::PortType|EString]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//[smags::PortType|EString]
		public CrossReference getTypePortTypeCrossReference_3_0() { return cTypePortTypeCrossReference_3_0; }
		
		//EString
		public RuleCall getTypePortTypeEStringParserRuleCall_3_0_1() { return cTypePortTypeEStringParserRuleCall_3_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class TypeBindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.tud.inf.st.smags.dsl.DSL.TypeBinding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeTypeCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeTypeEStringParserRuleCall_0_0_1 = (RuleCall)cTypeTypeCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cImplementationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImplementationEStringParserRuleCall_2_0 = (RuleCall)cImplementationAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TypeBinding smags::TypeBinding:
		//	type=[smags::Type|EString] '=' implementation=EString ';'
		@Override public ParserRule getRule() { return rule; }
		
		//type=[smags::Type|EString] '=' implementation=EString ';'
		public Group getGroup() { return cGroup; }
		
		//type=[smags::Type|EString]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//[smags::Type|EString]
		public CrossReference getTypeTypeCrossReference_0_0() { return cTypeTypeCrossReference_0_0; }
		
		//EString
		public RuleCall getTypeTypeEStringParserRuleCall_0_0_1() { return cTypeTypeEStringParserRuleCall_0_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//implementation=EString
		public Assignment getImplementationAssignment_2() { return cImplementationAssignment_2; }
		
		//EString
		public RuleCall getImplementationEStringParserRuleCall_2_0() { return cImplementationEStringParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	
	
	private final SmagsModelElements pSmagsModel;
	private final SmagsElementElements pSmagsElement;
	private final ImportElements pImport;
	private final MetaArchitectureElements pMetaArchitecture;
	private final MetaArchitectureElementElements pMetaArchitectureElement;
	private final TypeElements pType;
	private final VariableElements pVariable;
	private final MethodElements pMethod;
	private final TypeUseElements pTypeUse;
	private final PrimitiveUseElements pPrimitiveUse;
	private final GenericUseElements pGenericUse;
	private final PortTypeElementElements pPortTypeElement;
	private final CompositionOperatorElements pCompositionOperator;
	private final EStringElements pEString;
	private final ComponentTypeElements pComponentType;
	private final PortTypeElements pPortType;
	private final RoleModelElements pRoleModel;
	private final RoleModelSlotElements pRoleModelSlot;
	private final BindOperatorElements pBindOperator;
	private final ArchitectureElements pArchitecture;
	private final ArchitectureElementElements pArchitectureElement;
	private final ComponentElements pComponent;
	private final PortElements pPort;
	private final TypeBindingElements pTypeBinding;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSmagsModel = new SmagsModelElements();
		this.pSmagsElement = new SmagsElementElements();
		this.pImport = new ImportElements();
		this.pMetaArchitecture = new MetaArchitectureElements();
		this.pMetaArchitectureElement = new MetaArchitectureElementElements();
		this.pType = new TypeElements();
		this.pVariable = new VariableElements();
		this.pMethod = new MethodElements();
		this.pTypeUse = new TypeUseElements();
		this.pPrimitiveUse = new PrimitiveUseElements();
		this.pGenericUse = new GenericUseElements();
		this.pPortTypeElement = new PortTypeElementElements();
		this.pCompositionOperator = new CompositionOperatorElements();
		this.pEString = new EStringElements();
		this.pComponentType = new ComponentTypeElements();
		this.pPortType = new PortTypeElements();
		this.pRoleModel = new RoleModelElements();
		this.pRoleModelSlot = new RoleModelSlotElements();
		this.pBindOperator = new BindOperatorElements();
		this.pArchitecture = new ArchitectureElements();
		this.pArchitectureElement = new ArchitectureElementElements();
		this.pComponent = new ComponentElements();
		this.pPort = new PortElements();
		this.pTypeBinding = new TypeBindingElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.tud.inf.st.smags.dsl.DSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//SmagsModel smags::SmagsModel:
	//	{smags::SmagsModel} ('imports' '{'
	//	imports+=Import*
	//	'}')?
	//	elements+=SmagsElement*
	public SmagsModelElements getSmagsModelAccess() {
		return pSmagsModel;
	}
	
	public ParserRule getSmagsModelRule() {
		return getSmagsModelAccess().getRule();
	}
	
	//SmagsElement smags::SmagsElement:
	//	MetaArchitecture | Architecture
	public SmagsElementElements getSmagsElementAccess() {
		return pSmagsElement;
	}
	
	public ParserRule getSmagsElementRule() {
		return getSmagsElementAccess().getRule();
	}
	
	//Import smags::Import:
	//	importURI=STRING ';'
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//MetaArchitecture smags::MetaArchitecture:
	//	'MetaArchitecture' name=EString
	//	'{'
	//	types+=Type*
	//	'}'
	//	'{'
	//	elements+=MetaArchitectureElement*
	//	'}' ('start' 'with' initialRoleModel=[smags::RoleModel|EString])?
	public MetaArchitectureElements getMetaArchitectureAccess() {
		return pMetaArchitecture;
	}
	
	public ParserRule getMetaArchitectureRule() {
		return getMetaArchitectureAccess().getRule();
	}
	
	//MetaArchitectureElement smags::MetaArchitectureElement:
	//	ComponentType | PortType | RoleModel
	public MetaArchitectureElementElements getMetaArchitectureElementAccess() {
		return pMetaArchitectureElement;
	}
	
	public ParserRule getMetaArchitectureElementRule() {
		return getMetaArchitectureElementAccess().getRule();
	}
	
	//Type smags::Type:
	//	'Type' ':' name=EString ';'
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//Variable smags::Variable:
	//	type=TypeUse name=EString
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//Method smags::Method:
	//	returnType=TypeUse name=EString '(' (args+=Variable ("," args+=Variable)*)? ')'
	public MethodElements getMethodAccess() {
		return pMethod;
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}
	
	//TypeUse smags::TypeUse:
	//	PrimitiveUse | GenericUse
	public TypeUseElements getTypeUseAccess() {
		return pTypeUse;
	}
	
	public ParserRule getTypeUseRule() {
		return getTypeUseAccess().getRule();
	}
	
	//PrimitiveUse smags::PrimitiveUse:
	//	type=EString
	public PrimitiveUseElements getPrimitiveUseAccess() {
		return pPrimitiveUse;
	}
	
	public ParserRule getPrimitiveUseRule() {
		return getPrimitiveUseAccess().getRule();
	}
	
	//GenericUse smags::GenericUse:
	//	':' type=[smags::Type|EString]
	public GenericUseElements getGenericUseAccess() {
		return pGenericUse;
	}
	
	public ParserRule getGenericUseRule() {
		return getGenericUseAccess().getRule();
	}
	
	//PortTypeElement smags::PortTypeElement:
	//	(Variable | Method) ';'
	public PortTypeElementElements getPortTypeElementAccess() {
		return pPortTypeElement;
	}
	
	public ParserRule getPortTypeElementRule() {
		return getPortTypeElementAccess().getRule();
	}
	
	//CompositionOperator smags::CompositionOperator:
	//	BindOperator
	public CompositionOperatorElements getCompositionOperatorAccess() {
		return pCompositionOperator;
	}
	
	public ParserRule getCompositionOperatorRule() {
		return getCompositionOperatorAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//ComponentType smags::ComponentType:
	//	{smags::ComponentType}
	//	'ComponentType'
	//	name=EString ('provides' provides+=[smags::PortType|EString] (',' provides+=[smags::PortType|EString])*)?
	//	';'
	public ComponentTypeElements getComponentTypeAccess() {
		return pComponentType;
	}
	
	public ParserRule getComponentTypeRule() {
		return getComponentTypeAccess().getRule();
	}
	
	//PortType smags::PortType:
	//	{smags::PortType}
	//	'PortType'
	//	name=EString '{' elements+=PortTypeElement* '}'
	public PortTypeElements getPortTypeAccess() {
		return pPortType;
	}
	
	public ParserRule getPortTypeRule() {
		return getPortTypeAccess().getRule();
	}
	
	//RoleModel smags::RoleModel:
	//	{smags::RoleModel}
	//	'RoleModel'
	//	name=EString ('(' slots+=RoleModelSlot ("," slots+=RoleModelSlot)* ')')?
	//	'{'
	//	initialization+=CompositionOperator*
	//	'}'
	public RoleModelElements getRoleModelAccess() {
		return pRoleModel;
	}
	
	public ParserRule getRoleModelRule() {
		return getRoleModelAccess().getRule();
	}
	
	//RoleModelSlot smags::RoleModelSlot:
	//	{smags::RoleModelSlot} type=[smags::ComponentType|EString] name=EString
	public RoleModelSlotElements getRoleModelSlotAccess() {
		return pRoleModelSlot;
	}
	
	public ParserRule getRoleModelSlotRule() {
		return getRoleModelSlotAccess().getRule();
	}
	
	//BindOperator smags::BindOperator:
	//	{smags::BindOperator}
	//	'bind' 'role' to=[smags::PortType|EString]
	//	'to' slot=[smags::RoleModelSlot|EString] ';'
	public BindOperatorElements getBindOperatorAccess() {
		return pBindOperator;
	}
	
	public ParserRule getBindOperatorRule() {
		return getBindOperatorAccess().getRule();
	}
	
	//Architecture smags::Architecture:
	//	'Architecture' name=EString '::' type=[smags::MetaArchitecture|EString]
	//	'{'
	//	typeBindings+=TypeBinding*
	//	'}'
	//	'{'
	//	elements+=ArchitectureElement*
	//	'}'
	public ArchitectureElements getArchitectureAccess() {
		return pArchitecture;
	}
	
	public ParserRule getArchitectureRule() {
		return getArchitectureAccess().getRule();
	}
	
	//ArchitectureElement smags::ArchitectureElement:
	//	Component | Port
	public ArchitectureElementElements getArchitectureElementAccess() {
		return pArchitectureElement;
	}
	
	public ParserRule getArchitectureElementRule() {
		return getArchitectureElementAccess().getRule();
	}
	
	//Component smags::Component:
	//	'Component' name=EString '::' type=[smags::ComponentType|EString] ';'
	public ComponentElements getComponentAccess() {
		return pComponent;
	}
	
	public ParserRule getComponentRule() {
		return getComponentAccess().getRule();
	}
	
	//Port smags::Port:
	//	'Port' name=EString '::' type=[smags::PortType|EString] ';'
	public PortElements getPortAccess() {
		return pPort;
	}
	
	public ParserRule getPortRule() {
		return getPortAccess().getRule();
	}
	
	//TypeBinding smags::TypeBinding:
	//	type=[smags::Type|EString] '=' implementation=EString ';'
	public TypeBindingElements getTypeBindingAccess() {
		return pTypeBinding;
	}
	
	public ParserRule getTypeBindingRule() {
		return getTypeBindingAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
